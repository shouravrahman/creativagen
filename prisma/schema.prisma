generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(User)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
   generatedContents     GeneratedContent[]
   favoritedTemplates    FavoritedTemplate[]
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

   @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

   @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

   @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @unique @db.ObjectId
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserApiLimit {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  count      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserSubscription {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String   @unique @db.ObjectId
  stripeCustomerId        String?  @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId    String?  @unique @map(name: "stripe_subscription_id")
  stripePriceId           String?  @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd  DateTime? @map(name: "stripe_current_period_end")
}
model GeneratedContent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  formValues   Json
  aiResponse   String
  templateSlug String
  createdBy    String   @db.ObjectId
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String   @unique
  category    String
  imageUrl    String
  aiPrompt    String
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  favoritedBy FavoritedTemplate[]
}

model FavoritedTemplate {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  templateId String   @db.ObjectId
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}
