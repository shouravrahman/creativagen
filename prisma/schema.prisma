generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Account {
   id                String  @id @default(cuid())
   userId            String
   type              String
   provider          String
   providerAccountId String
   refresh_token     String?
   access_token      String?
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String?
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@index([userId])
}

enum UserRole {
   Admin
   User
}

model User {
   id                    String                 @id @default(cuid())
   name                  String?
   email                 String?                @unique
   emailVerified         DateTime?
   image                 String?
   password              String?
   role                  UserRole               @default(User)
   accounts              Account[]
   isTwoFactorEnabled    Boolean                @default(false)
   twoFactorConfirmation TwoFactorConfirmation?
   generatedContents     GeneratedContent[]
   scheduledPosts        ScheduledPost[]
   contentPlans          ContentPlan[]

   UserSubscription UserSubscription[]

   @@index([email])
}

model VerificationToken {
   id      String   @id @default(cuid())
   email   String
   token   String   @unique
   expires DateTime

   @@unique([email, token])
   @@index([expires])
}

model ResetPasswordToken {
   id      String   @id @default(cuid())
   email   String
   token   String   @unique
   expires DateTime

   @@unique([email, token])
}

model TwoFactorToken {
   id      String   @id @default(cuid())
   email   String
   token   String   @unique
   expires DateTime

   @@unique([email, token])
}

model TwoFactorConfirmation {
   id      String   @id @default(cuid())
   userId  String   @unique
   expires DateTime
   user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserApiLimit {
   id        String   @id @default(cuid())
   userId    String   @unique
   count     Int      @default(0)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model UserSubscription {
   id                     String    @id @default(cuid())
   userId                 String    @unique
   stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
   stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
   stripePriceId          String?   @map(name: "stripe_price_id")
   stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
   user                   User      @relation(fields: [userId], references: [id])
}

model Template {
   id          String   @id @default(cuid())
   name        String
   description String
   slug        String   @unique
   category    String
   icon        String
   color       String
   aiPrompt    String
   features    String[]
   tags        String[]
   formFields  Json
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
}

model GeneratedContent {
   id           String   @id @default(cuid())
   formValues   String
   aiResponse   String
   templateSlug String
   createdBy    String
   createdAt    DateTime @default(now())
   temperature  Float    @default(0.7)
   maxTokens    Int      @default(2000)

   user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model ContentPlan {
   id          String   @id @default(cuid())
   title       String
   description String
   startDate   DateTime
   endDate     DateTime
   userId      String
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt

   user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
   platforms ContentPlanPlatform[]
}

model Platform {
   id           String                @id @default(cuid())
   name         String
   contentPlans ContentPlanPlatform[]
}

model ContentPlanPlatform {
   id            String @id @default(cuid())
   contentPlanId String
   platformId    String

   contentPlan ContentPlan @relation(fields: [contentPlanId], references: [id], onDelete: Cascade)
   platform    Platform    @relation(fields: [platformId], references: [id], onDelete: Cascade)

   @@unique([contentPlanId, platformId])
}

model ScheduledPost {
   id          String   @id @default(cuid())
   content     String
   scheduledAt DateTime
   userId      String
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
